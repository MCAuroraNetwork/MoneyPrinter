plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'io.papermc.paperweight.userdev' version '2.0.0-beta.18'
}

group = 'MoneyPrinter'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://repo.aikar.co/content/groups/aikar/'
    }
    maven {
        url = 'https://repo.codemc.io/repository/maven-releases/'
    }
    maven {
        url = 'https://libraries.minecraft.net/'
    }
    maven {
        url = 'https://jitpack.io'
    }
    flatDir {
        dirs '.'
    }
}

dependencies {
    paperweight.devBundle("io.papermc.paper", "1.21.4-R0.1-SNAPSHOT")

    implementation 'org.mongodb:mongodb-driver-sync:5.2.0'
    implementation 'co.aikar:acf-paper:0.5.1-SNAPSHOT'
    implementation 'com.github.retrooper:packetevents-spigot:2.9.3'

    compileOnly 'io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT'
    compileOnly 'com.mojang:authlib:6.0.58'
    compileOnly('com.github.MilkBowl:VaultAPI:1.7') {
        exclude group: 'org.bukkit', module: 'bukkit'
    }
    compileOnly ':AuroraChat:1.1.0'
}

build {
    dependsOn(shadowJar)
}

shadowJar {
    minimize()
    archiveFileName.set("${project.name}-${project.version}.jar")
    relocate 'co.aikar.commands', 'club.aurorapvp.moneyprinter.shaded.acf'
    relocate 'co.aikar.locales', 'club.aurorapvp.moneyprinter.shaded.locales'
    relocate 'com.github.retrooper.packetevents', 'club.aurorapvp.moneyprinter.shaded.com.github.retrooper.packetevents'
    relocate 'io.github.retrooper.packetevents', 'club.aurorapvp.moneyprinter.shaded.io.github.retrooper.packetevents'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}